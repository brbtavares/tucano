//! # üìä M√©tricas Financeiras
//!
//! M√≥dulo contendo implementa√ß√µes de m√©tricas essenciais para an√°lise quantitativa
//! de estrat√©gias de trading e avalia√ß√£o de performance de portf√≥lio.
//!
//! ## üéØ M√©tricas Dispon√≠veis
//!
//! ### M√©tricas de Risco-Retorno
//! - **Sharpe Ratio**: Retorno ajustado ao risco total
//! - **Sortino Ratio**: Retorno ajustado ao downside risk
//! - **Calmar Ratio**: Retorno anualizado dividido pelo m√°ximo drawdown
//!
//! ### M√©tricas de Performance
//! - **Rate of Return**: Taxa de retorno em diferentes per√≠odos
//! - **Win Rate**: Percentual de trades vencedores
//! - **Profit Factor**: Rela√ß√£o entre lucros e preju√≠zos
//!
//! ### M√©tricas de Risco
//! - **Drawdown**: An√°lise de perdas tempor√°rias m√°ximas e m√©dias
//!
//! ## üí° Exemplo de Uso
//!
//! C√°lculo do Sharpe Ratio (estat√≠sticas fict√≠cias) e gera√ß√£o de drawdown usando `DrawdownGenerator`:
//!
//! ```rust
//! use analytics::metric::sharpe::SharpeRatio;
//! use analytics::metric::drawdown::DrawdownGenerator;
//! use rust_decimal_macros::dec;
//! use chrono::{DateTime, Utc};
//!
//! // Estat√≠sticas (exemplo)
//! let risk_free = dec!(0.0015);
//! let mean_ret  = dec!(0.0025);
//! let std_dev   = dec!(0.02);
//! let interval = chrono::TimeDelta::hours(2);
//! let sharpe = SharpeRatio::calculate(risk_free, mean_ret, std_dev, interval);
//! assert!(sharpe.value != rust_decimal::Decimal::ZERO);
//!
//! // Exemplo m√≠nimo de uso do DrawdownGenerator
//! let t0 = DateTime::<Utc>::MIN_UTC;
//! let mut gen = DrawdownGenerator::init(dec!(100), t0);
//! // valor cai (gera drawdown interno, mas n√£o emite ainda)
//! gen.update(dec!(90), t0 + chrono::TimeDelta::days(1));
//! // valor volta acima do pico ‚Üí emite drawdown
//! let dd = gen.update(dec!(120), t0 + chrono::TimeDelta::days(2));
//! assert!(dd.is_some());
//! C√°lculo simples do Sharpe Ratio com estat√≠sticas agregadas do per√≠odo (valores hipot√©ticos).
//!
//! ```rust
//! use analytics::metric::sharpe::SharpeRatio;
//! use analytics::time::Daily;
//! use rust_decimal_macros::dec;
//!
//! let risk_free = dec!(0.0015); // 0.15%
//! let mean_ret  = dec!(0.0025); // 0.25%
//! let std_dev   = dec!(0.0200); // 2.00%
//!
//! let sharpe = SharpeRatio::calculate(risk_free, mean_ret, std_dev, Daily);
//! assert_eq!(sharpe.value, dec!(0.05));
//! ```

/// L√≥gica de c√°lculo do Calmar Ratio.
///
/// O Calmar Ratio √© uma m√©trica que mede o retorno anualizado dividido
/// pelo m√°ximo drawdown, fornecendo uma medida de retorno ajustado ao
/// risco de cauda (tail risk).
pub mod calmar;

/// L√≥gica de c√°lculo de Drawdown.
///
/// Drawdown representa a perda tempor√°ria de valor de um portf√≥lio,
/// medindo a maior queda de um pico at√© um vale. Inclui c√°lculos de
/// m√°ximo drawdown e drawdown m√©dio.
pub mod drawdown;

/// L√≥gica de c√°lculo do Profit Factor.
///
/// Profit Factor √© a rela√ß√£o entre o lucro bruto total e a perda bruta
/// total, indicando quantos reais de lucro s√£o gerados para cada real
/// de perda na estrat√©gia.
pub mod profit_factor;

/// L√≥gica de c√°lculo da Taxa de Retorno.
///
/// Calcula retornos em diferentes bases temporais (di√°rio, mensal, anual)
/// e permite an√°lise de performance em v√°rios horizontes de tempo.
pub mod rate_of_return;

/// L√≥gica de c√°lculo do Sharpe Ratio.
///
/// O Sharpe Ratio mede o excesso de retorno por unidade de risco,
/// sendo uma das m√©tricas mais utilizadas para avaliar estrat√©gias
/// de investimento ajustadas ao risco.
pub mod sharpe;

/// L√≥gica de c√°lculo do Sortino Ratio.
///
/// Similar ao Sharpe Ratio, mas considera apenas o desvio padr√£o
/// dos retornos negativos (downside deviation), focando no risco
/// de perdas em vez de volatilidade total.
pub mod sortino;

/// L√≥gica de c√°lculo da Win Rate.
///
/// Win Rate √© o percentual de trades que resultaram em lucro,
/// uma m√©trica fundamental para avaliar a precis√£o de uma
/// estrat√©gia de trading.
pub mod win_rate;
