//! DISCLAIMER: Uso experimental/educacional. N√£o √© recomenda√ß√£o de investimento. Veja README e DISCLAIMER.md.
//! # üìä Analytics - M√≥dulo de An√°lise Financeira
//!
//! Este m√≥dulo fornece ferramentas abrangentes para an√°lise quantitativa de dados financeiros,
//! incluindo m√©tricas de performance, algoritmos estat√≠sticos e gera√ß√£o de relat√≥rios.
//!
//! ## üéØ Funcionalidades Principais
//!
//! - **M√©tricas Financeiras**: Sharpe, Sortino, Calmar, Win Rate, Profit Factor
//! - **An√°lise de Drawdown**: C√°lculo de m√°ximo e m√©dio drawdown
//! - **Algoritmos Estat√≠sticos**: Processamento de datasets financeiros
//! - **Relat√≥rios Automatizados**: Gera√ß√£o de sum√°rios e tear sheets
//! - **Intervalos Temporais**: Suporte a diferentes per√≠odos de an√°lise
//!
//! ## üèóÔ∏è Estrutura (simplificada)
//! Arquivos principais: `algorithm.rs`, diret√≥rio `metric/`, diret√≥rio `summary/`, `time.rs`.
//! ## üèóÔ∏è Estrutura do M√≥dulo
//!
//! (Diagrama ilustrativo ‚Äì n√£o √© c√≥digo execut√°vel)
//!
//! ```text
//! analytics/
//!  ‚îú‚îÄ algorithm.rs     # Algoritmos estat√≠sticos para an√°lise de datasets
//!  ‚îú‚îÄ metric/          # M√©tricas financeiras (Sharpe, Sortino, etc.)
//!  ‚îú‚îÄ summary/         # Relat√≥rios e sum√°rios financeiros
//!  ‚îî‚îÄ time.rs          # Defini√ß√µes de intervalos temporais
//! ```
//!
//! ## üìà Exemplo de Uso Simplificado
//!
//! C√°lculo de Sharpe Ratio com valores hipot√©ticos (retornos j√° agregados).
//!
//! C√°lculo simples do Sharpe Ratio usando estat√≠sticas pr√©-computadas de uma s√©rie de retornos:
//!
//! ```rust
//! use analytics::metric::sharpe::SharpeRatio;
//! use rust_decimal::Decimal;
//! use rust_decimal_macros::dec;
//! use chrono::TimeDelta;
//!
//! // Estat√≠sticas de retornos (exemplo fict√≠cio)
//! let risk_free_return = dec!(0.0015);    // 0.15%
//! let mean_return      = dec!(0.0025);    // 0.25%
//! let std_dev_returns  = dec!(0.02);      // 2%
//! let interval = TimeDelta::hours(2);     // per√≠odo analisado
//!
//! let sharpe = SharpeRatio::calculate(risk_free_return, mean_return, std_dev_returns, interval);
//! assert!(sharpe.value != rust_decimal::Decimal::ZERO);
//! ```rust
//! use analytics::metric::sharpe::SharpeRatio;
//! use analytics::time::Daily;
//! use rust_decimal::Decimal;
//! use rust_decimal_macros::dec;
//!
//! // Retorno livre de risco, retorno m√©dio e desvio padr√£o (todos no mesmo per√≠odo)
//! let risk_free = dec!(0.0015);    // 0.15%
//! let mean_ret  = dec!(0.0025);    // 0.25%
//! let std_dev   = dec!(0.0200);    // 2.00%
//!
//! let sharpe = SharpeRatio::calculate(risk_free, mean_ret, std_dev, Daily);
//! assert_eq!(sharpe.value, dec!(0.05));
//! ```
//!
//! ## üîç M√©tricas Dispon√≠veis
//!
//! - **Sharpe Ratio**: Retorno ajustado ao risco
//! - **Sortino Ratio**: Sharpe considerando apenas downside risk
//! - **Calmar Ratio**: Retorno anualizado / m√°ximo drawdown
//! - **Win Rate**: Percentual de trades vencedores
//! - **Profit Factor**: Lucro bruto / preju√≠zo bruto
//! - **Drawdown**: An√°lise de perdas m√°ximas e m√©dias

/// Algoritmos estat√≠sticos para an√°lise de datasets financeiros.
///
/// Cont√©m implementa√ß√µes de algoritmos para processamento e an√°lise
/// de dados financeiros, incluindo c√°lculos de volatilidade, correla√ß√£o
/// e outras m√©tricas estat√≠sticas fundamentais.
pub mod algorithm;

/// M√©tricas financeiras e m√©todos para calcul√°-las em diferentes
/// [`TimeIntervals`](time::TimeInterval).
///
/// Inclui todas as m√©tricas essenciais para an√°lise quantitativa:
/// Sharpe, Sortino, Calmar ratios, Win Rate, Profit Factor, e an√°lises
/// de drawdown para avalia√ß√£o de performance de estrat√©gias.
pub mod metric;

/// Sum√°rios estat√≠sticos para datasets financeiros.
///
/// Fornece estruturas para gera√ß√£o de relat√≥rios abrangentes como
/// `TradingSummary`, `TearSheet`, `TearSheetAsset`, `PnLReturns`, etc.
/// Essenciais para an√°lise de performance e relat√≥rios automatizados.
pub mod summary;

/// Defini√ß√µes de intervalos temporais usados em c√°lculos financeiros.
///
/// Suporta diferentes conven√ß√µes de tempo financeiro como `Annual365`,
/// `Annual252` (dias √∫teis), `Daily`, etc. para c√°lculos precisos
/// de m√©tricas anualizadas e peri√≥dicas.
pub mod time;

use chrono::{DateTime, Utc};

/// Trait para tipos que possuem timestamp.
///
/// Define a interface padr√£o para objetos que carregam informa√ß√£o temporal,
/// essencial para an√°lises baseadas em tempo e ordena√ß√£o cronol√≥gica.
pub trait Timed {
    /// Retorna o timestamp deste item.
    fn timestamp(&self) -> DateTime<Utc>;
}

/// Estrutura wrapper que combina um valor com timestamp.
///
/// √ötil para associar dados financeiros com seus timestamps espec√≠ficos,
/// permitindo an√°lises temporais precisas e ordena√ß√£o cronol√≥gica.
///
/// # Exemplo
/// ```rust
/// use analytics::{TimedValue, Timed};
/// use chrono::Utc;
///
/// let price = TimedValue::new(100.50_f64, Utc::now());
/// assert!(price.timestamp() <= Utc::now());
/// ```
#[derive(Debug, Clone, PartialEq)]
pub struct TimedValue<T> {
    /// O valor associado ao timestamp
    pub value: T,
    /// Timestamp UTC do valor
    pub timestamp: DateTime<Utc>,
}

impl<T> TimedValue<T> {
    /// Cria um novo `TimedValue` com o valor e timestamp fornecidos.
    pub fn new(value: T, timestamp: DateTime<Utc>) -> Self {
        Self { value, timestamp }
    }
}

impl<T> Timed for TimedValue<T> {
    fn timestamp(&self) -> DateTime<Utc> {
        self.timestamp
    }
}

#[cfg(test)]
pub mod test_utils {
    //! Utilit√°rios para testes do m√≥dulo analytics.
    //!
    //! Fornece fun√ß√µes auxiliares para cria√ß√£o de dados de teste
    //! e manipula√ß√£o temporal em cen√°rios de teste.

    use chrono::{DateTime, Utc};

    /// Adiciona dias a uma data base para cria√ß√£o de dados de teste.
    ///
    /// √ötil para gerar s√©ries temporais de teste com intervalos
    /// espec√≠ficos entre observa√ß√µes.
    pub fn time_plus_days(base: DateTime<Utc>, plus: u64) -> DateTime<Utc> {
        base + chrono::Duration::days(plus as i64)
    }
}
