#![forbid(unsafe_code)]
#![warn(
    unused,
    clippy::cognitive_complexity,
    unused_crate_dependencies,
    unused_extern_crates,
    clippy::unused_self,
    clippy::useless_let_if_seq,
    missing_debug_implementations,
    rust_2018_idioms
)]
#![allow(clippy::type_complexity, clippy::too_many_arguments, type_alias_bounds)]

//! # üß© Toucan Strategy - Framework de Estrat√©gias de Trading
//!
//! Interfaces e implementa√ß√µes de estrat√©gias para o ecossistema de trading Toucan.
//! Fornece as estrat√©gias fundamentais e implementa√ß√µes padr√£o que podem ser
//! utilizadas com o engine de trading Toucan.
//!
//! ## üéØ Estrat√©gias Principais
//!
//! - [`AlgoStrategy`] - Gera√ß√£o de ordens algor√≠tmicas baseadas em sinais
//! - [`ClosePositionsStrategy`] - Fechamento autom√°tico de posi√ß√µes abertas  
//! - [`OnDisconnectStrategy`] - Tratamento de desconex√µes de exchanges
//! - [`OnTradingDisabledStrategy`] - A√ß√µes quando trading √© desabilitado
//!
//! ## üèóÔ∏è Arquitetura de Estrat√©gias
//!
//! ### Filosofia Modular
//! Estrat√©gias no ecossistema Toucan s√£o componentes plug√°veis que podem ser
//! combinados com diferentes engines, gestores de risco e sistemas de execu√ß√£o.
//! Cada tipo de estrat√©gia lida com um aspecto espec√≠fico da l√≥gica de trading.
//!
//! ### Composi√ß√£o de Estrat√©gias
//! ```rust,no_run
//! use strategy::{
//!     algo::AlgoStrategy,
//!     close_positions::ClosePositionsStrategy,
//!     on_disconnect::OnDisconnectStrategy
//! };
//! 
//! struct MyTradingStrategy {
//!     algo: MyAlgoStrategy,
//!     risk_management: RiskStrategy,
//!     emergency: EmergencyStrategy,
//! }
//! ```
//!
//! ## üöÄ Tipos de Estrat√©gia
//!
//! ### Estrat√©gias Algor√≠tmicas
//! Geram sinais de compra/venda baseados em an√°lise t√©cnica ou fundamentalista:
//! - **Mean Reversion**: Revers√£o √† m√©dia
//! - **Momentum**: Seguimento de tend√™ncia  
//! - **Arbitrage**: Arbitragem entre mercados
//! - **Market Making**: Provis√£o de liquidez
//!
//! ### Estrat√©gias de Gest√£o de Risco
//! Controlam exposi√ß√£o e limitam perdas:
//! - **Stop Loss**: Corte autom√°tico de perdas
//! - **Position Sizing**: Dimensionamento de posi√ß√£o
//! - **Exposure Limits**: Limites de exposi√ß√£o
//! - **Correlation Checks**: Verifica√ß√£o de correla√ß√£o
//!
//! ### Estrat√©gias de Conting√™ncia
//! Respondem a eventos excepcionais:
//! - **Disconnect Handling**: Desconex√£o de exchanges
//! - **Trading Halt**: Paralisa√ß√£o do trading
//! - **Emergency Exit**: Sa√≠da de emerg√™ncia
//! - **Risk Breach**: Viola√ß√£o de limites de risco
//!
//! ## üí° Exemplo de Implementa√ß√£o
//!
//! ```rust,no_run
//! use strategy::algo::AlgoStrategy;
//! use core::engine::EngineState;
//! 
//! struct MovingAverageStrategy {
//!     short_period: usize,
//!     long_period: usize,
//! }
//! 
//! impl AlgoStrategy for MovingAverageStrategy {
//!     fn generate_orders(&mut self, state: &EngineState) -> Vec<Order> {
//!         // Implementar l√≥gica de m√©dias m√≥veis
//!         vec![]
//!     }
//! }
//! ```
//!
//! ## üîÑ Ciclo de Vida da Estrat√©gia
//!
//! 1. **Inicializa√ß√£o**: Setup de par√¢metros e estado inicial
//! 2. **Processamento**: An√°lise de dados de mercado
//! 3. **Gera√ß√£o de Sinais**: Cria√ß√£o de ordens baseadas em l√≥gica
//! 4. **Execu√ß√£o**: Envio de ordens para o exchange
//! 5. **Monitoramento**: Acompanhamento de posi√ß√µes e performance

/// Define interface de estrat√©gia para gera√ß√£o de ordens algor√≠tmicas baseadas
/// no `EngineState` atual.
///
/// Estrat√©gias algor√≠tmicas s√£o o cora√ß√£o do sistema de trading, gerando sinais
/// de compra e venda baseados em an√°lise de dados de mercado em tempo real.
pub mod algo;

/// Define interface de estrat√©gia para gera√ß√£o de ordens que fecham posi√ß√µes abertas.
///
/// Essencial para gest√£o de risco e sa√≠da controlada de posi√ß√µes, especialmente
/// em situa√ß√µes de emerg√™ncia ou fim de sess√£o de trading.
pub mod close_positions;

/// Define interface de estrat√©gia para a√ß√µes customizadas em caso de desconex√£o
/// de exchange.
///
/// Permite definir comportamentos espec√≠ficos quando a conectividade com o
/// exchange √© perdida, como fechamento de posi√ß√µes ou cancelamento de ordens.
pub mod on_disconnect;

/// Define interface de estrat√©gia para a√ß√µes customizadas quando o estado de
/// trading √© definido como `TradingState::Disabled`.
///
/// Importante para conformidade regulat√≥ria e gest√£o de sess√µes de trading,
/// permitindo a√ß√µes espec√≠ficas quando o trading √© suspenso.
pub mod on_trading_disabled;

/// Implementa√ß√µes padr√£o de estrat√©gias.
///
/// Fornece implementa√ß√µes b√°sicas e reutiliz√°veis das interfaces de estrat√©gia,
/// servindo como ponto de partida para estrat√©gias customizadas.
pub mod default;

// Re-export the main traits for convenience
pub use algo::AlgoStrategy;
pub use close_positions::ClosePositionsStrategy;
pub use on_disconnect::OnDisconnectStrategy;
pub use on_trading_disabled::OnTradingDisabled;
pub use default::DefaultStrategy;
