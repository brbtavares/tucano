//! # üß† Estrat√©gias Algor√≠tmicas
//!
//! Define a interface principal para estrat√©gias algor√≠tmicas no framework Toucan.
//! Estrat√©gias implementam l√≥gica de trading baseada no estado atual do sistema,
//! gerando ordens de abertura e cancelamento de forma automatizada.

use execution::{
    order::request::{OrderRequestCancel, OrderRequestOpen},
    ExchangeIndex,
    InstrumentIndex,
};

/// Interface de estrat√©gia para gera√ß√£o de ordens algor√≠tmicas baseadas no
/// `EngineState` atual.
///
/// Esta trait define o contrato principal para todas as estrat√©gias algor√≠tmicas
/// no ecossistema Toucan. Implementa√ß√µes desta trait analisam o estado atual
/// do sistema e geram requests de ordens (abertura e cancelamento) baseados
/// em sua l√≥gica espec√≠fica.
///
/// # Filosofia de Design
///
/// - **Stateless**: A estrat√©gia n√£o mant√©m estado interno, recebe estado completo
/// - **Pure Functions**: Mesma entrada sempre produz mesma sa√≠da
/// - **Composable**: Estrat√©gias podem ser combinadas e reutilizadas
/// - **Testable**: F√°cil de testar por ser determin√≠stica
///
/// # Par√¢metros de Tipo
/// * `ExchangeKey` - Tipo usado para identificar um exchange (padr√£o: [`ExchangeIndex`])
/// * `InstrumentKey` - Tipo usado para identificar um instrumento (padr√£o: [`InstrumentIndex`])
///
/// # Exemplo de Implementa√ß√£o
///
/// ```rust,no_run
/// use strategy::algo::AlgoStrategy;
/// use core::engine::EngineState;
/// 
/// struct MovingAverageStrategy {
///     short_period: usize,
///     long_period: usize,
/// }
/// 
/// impl AlgoStrategy for MovingAverageStrategy {
///     type State = EngineState<MyGlobalData, MyInstrumentData>;
///     
///     fn generate_algo_orders(&self, state: &Self::State) -> (Vec<OrderRequestCancel>, Vec<OrderRequestOpen>) {
///         let mut cancel_orders = Vec::new();
///         let mut open_orders = Vec::new();
///         
///         // Implementar l√≥gica de m√©dias m√≥veis
///         for (instrument, data) in state.market_data.iter() {
///             if should_buy(data) {
///                 open_orders.push(OrderRequestOpen::market_buy(instrument, 100.0));
///             } else if should_sell(data) {
///                 open_orders.push(OrderRequestOpen::market_sell(instrument, 100.0));
///             }
///         }
///         
///         (cancel_orders, open_orders)
///     }
/// }
/// ```
///
/// # Tipos de Estrat√©gia Comum
///
/// ## Estrat√©gias T√©cnicas
/// - **Moving Average Crossover**: Cruzamento de m√©dias m√≥veis
/// - **RSI Overbought/Oversold**: Baseado no √≠ndice de for√ßa relativa
/// - **Bollinger Bands**: Bandas de volatilidade
/// - **MACD Signal**: Converg√™ncia/diverg√™ncia de m√©dias
///
/// ## Estrat√©gias Fundamentalistas
/// - **Earnings Momentum**: Baseado em resultados trimestrais
/// - **Value Investing**: M√©tricas de valor (P/E, P/B, etc.)
/// - **Economic Indicators**: Indicadores macroecon√¥micos
///
/// ## Estrat√©gias Quantitativas
/// - **Statistical Arbitrage**: Arbitragem estat√≠stica
/// - **Mean Reversion**: Revers√£o √† m√©dia
/// - **Momentum**: Seguimento de tend√™ncia
/// - **Market Making**: Provis√£o de liquidez
pub trait AlgoStrategy<ExchangeKey = ExchangeIndex, InstrumentKey = InstrumentIndex> {
    /// Estado usado pela `AlgoStrategy` para determinar quais requests de abertura
    /// e cancelamento gerar.
    ///
    /// Para estrat√©gias do ecossistema Toucan, este √© o `EngineState` completo
    /// do sistema de trading, contendo todos os dados de mercado, posi√ß√µes,
    /// ordens abertas, e outros dados necess√°rios para tomada de decis√£o.
    ///
    /// ## Exemplo
    /// ```rust,ignore
    /// type State = EngineState<DefaultGlobalData, DefaultInstrumentMarketData>;
    /// ```
    ///
    /// O estado tipicamente inclui:
    /// - **Market Data**: Pre√ßos, volumes, orderbook
    /// - **Portfolio**: Posi√ß√µes atuais e P&L
    /// - **Orders**: Ordens abertas e hist√≥rico
    /// - **Account**: Saldos e margem dispon√≠vel
    /// - **Connectivity**: Status de conex√£o com exchanges
    type State;

    /// Gera ordens algor√≠tmicas baseadas no `State` atual do sistema.
    ///
    /// Este m√©todo √© o cora√ß√£o da estrat√©gia, sendo chamado pelo engine
    /// sempre que h√° atualiza√ß√µes no estado do sistema. Deve analisar o
    /// estado atual e retornar duas listas:
    ///
    /// 1. **Cancel Orders**: Ordens a serem canceladas
    /// 2. **Open Orders**: Novas ordens a serem abertas
    ///
    /// # Par√¢metros
    /// - `state`: Estado atual completo do sistema de trading
    ///
    /// # Retorno
    /// Tupla contendo:
    /// - Iterator de requests de cancelamento
    /// - Iterator de requests de abertura
    ///
    /// # Performance
    /// Este m√©todo √© chamado frequentemente e deve ser otimizado:
    /// - Evitar aloca√ß√µes desnecess√°rias
    /// - Usar lazy evaluation quando poss√≠vel
    /// - Cachear c√°lculos pesados quando apropriado
    ///
    /// # Exemplo
    /// ```rust,no_run
    /// fn generate_algo_orders(&self, state: &Self::State) -> (Vec<CancelRequest>, Vec<OpenRequest>) {
    ///     // Analisar dados de mercado
    ///     let signals = self.analyze_market_data(&state.market_data);
    ///     
    ///     // Gerar orders baseadas nos sinais
    ///     let open_orders = signals.into_iter()
    ///         .filter_map(|signal| self.signal_to_order(signal))
    ///         .collect();
    ///     
    ///     // Cancelar ordens obsoletas
    ///     let cancel_orders = state.open_orders.iter()
    ///         .filter(|order| self.should_cancel_order(order))
    ///         .map(|order| OrderRequestCancel::new(order.id))
    ///         .collect();
    ///         
    ///     (cancel_orders, open_orders)
    /// }
    /// ```
    fn generate_algo_orders(
        &self,
        state: &Self::State,
    ) -> (
        impl IntoIterator<Item = OrderRequestCancel<ExchangeKey, InstrumentKey>>,
        impl IntoIterator<Item = OrderRequestOpen<ExchangeKey, InstrumentKey>>,
    );
}
