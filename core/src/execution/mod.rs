//! # Execution Management
//!
//! This module provides high-level execution request routing and account management for the Toucan trading framework.
//! It orchestrates order execution across multiple exchanges while maintaining centralized account state and balance tracking.
//!
//! ## Key Components
//!
//! ### ExecutionManager
//! - Routes execution requests to appropriate exchanges
//! - Manages per-exchange execution links
//! - Handles account event processing and state updates
//! - Provides unified interface for multi-exchange trading
//!
//! ### ExecutionBuilder
//! - Ergonomic configuration for multi-exchange execution setup
//! - Supports both live and mock exchange connections
//! - Handles initialization of execution links and communication channels
//!
//! ### Request Routing
//! - Centralized request distribution based on exchange and instrument
//! - Order lifecycle management across different exchange protocols
//! - Error handling and retry logic for execution failures
//!
//! ## Architecture
//!
//! ```text
//! ┌─────────────────────────────────────────────────────────────┐
//! │                    EXECUTION LAYER                          │
//! ├─────────────────┬─────────────────┬─────────────────────────┤
//! │ ExecutionManager│ Request Router  │   Account Manager       │
//! │                 │                 │                         │
//! │ • Multi-Exchange│ • Order Routing │ • Balance Tracking      │
//! │   Coordination  │ • Request Queue │ • Event Processing      │
//! │ • State Sync    │ • Error Handling│ • State Replication     │
//! └─────────────────┴─────────────────┴─────────────────────────┘
//!                              │
//! ┌─────────────────────────────┼─────────────────────────────┐
//! │            EXCHANGE CONNECTIONS                          │
//! ├─────────────────────────────┼─────────────────────────────┤
//! │   Binance ←→ WebSocket      │     Kraken ←→ REST API      │
//! │   Coinbase ←→ FIX           │     Custom ←→ Native        │
//! └─────────────────────────────┴─────────────────────────────┘
//! ```
//!
//! ## Usage Example
//!
//! ```rust
//! use core::execution::{builder::ExecutionBuilder, request::ExecutionRequest};
//!
//! // Build multi-exchange execution system
//! let execution = ExecutionBuilder::new()
//!     .add_exchange("binance", binance_config)
//!     .add_exchange("kraken", kraken_config)
//!     .build()
//!     .await?;
//!
//! // Process execution requests
//! let request = ExecutionRequest::OpenOrder(order_request);
//! execution.send(request).await?;
//! ```

use crate::{engine::execution_tx::MultiExchangeTxMap, execution::builder::ExecutionHandles};
use data::streams::reconnect;
use execution::{AccountEvent, AssetIndex, ExchangeIndex, InstrumentIndex}; // now String aliases from execution::compat
use integration::channel::Channel;
use markets::exchange::ExchangeId;

/// Provides an execution manager builder for ergonomically initialising multiple execution links
/// to mock and live exchanges.
pub mod builder;

/// Provides an error type that represents all errors that are generated by an execution link.
pub mod error;

/// Per-exchange execution manager that actions order requests from the Engine and forwards back
/// responses.
pub mod manager;

/// Defines an `ExecutionRequest` used by the `Engine` to communicate with an `ExecutionManager`.
pub mod request;

/// Convenient type alias that represents a [`reconnect::Event`] produced by the [`AccountEvent`]
/// stream.
pub type AccountStreamEvent<
    ExchangeKey = ExchangeIndex,
    AssetKey = AssetIndex,
    InstrumentKey = InstrumentIndex,
> = reconnect::Event<ExchangeId, AccountEvent<ExchangeKey, AssetKey, InstrumentKey>>;

/// Initialised [`ExecutionBuild`](builder::ExecutionBuild).
///
/// Contains execution component task handles as well as
/// [`ExecutionRequest`](request::ExecutionRequest) and [`AccountStreamEvent`] channels.
#[allow(missing_debug_implementations)]
pub struct Execution {
    pub execution_txs: MultiExchangeTxMap,
    pub account_channel: Channel<AccountStreamEvent>,
    pub handles: ExecutionHandles,
}
