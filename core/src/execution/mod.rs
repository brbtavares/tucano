
//! # Execution Management
//!
//! High-level module for routing execution requests and account management.
//! Orchestrates order execution across multiple exchanges while maintaining centralized state and balances.
//!
//! ## Main Components
//!
//! ### ExecutionManager
//! - Routes execution requests to the appropriate exchange
//! - Manages execution links per exchange
//! - Processes account events and updates state
//! - Unified interface for multi-exchange trading
//!
//! ### ExecutionBuilder
//! - Ergonomic configuration for multi-exchange setup
//! - Supports live and mock connections
//! - Initializes execution links and communication channels
//!
//! ### Request Routing
//! - Centralized distribution based on exchange and instrument
//! - Manages order lifecycle across different protocols
//! - Error handling and retries for execution failures
//!
//! ## Architecture
//!
//! ```text
//! ┌─────────────────────────────────────────────────────────────┐
//! │                    EXECUTION LAYER                          │
//! ├─────────────────┬─────────────────┬─────────────────────────┤
//! │ ExecutionManager│ Request Router  │   Account Manager       │
//! │                 │                 │                         │
//! │ • Multi-Exchange│ • Order Routing │ • Balance Tracking      │
//! │   Coordination  │ • Request Queue │ • Event Processing      │
//! │ • State Sync    │ • Error Handling│ • State Replication     │
//! └─────────────────┴─────────────────┴─────────────────────────┘
//!                              │
//! ┌─────────────────────────────┼─────────────────────────────┐
//! │            EXCHANGE CONNECTIONS                          │
//! ├─────────────────────────────┼─────────────────────────────┤
//! │   Binance ←→ WebSocket      │     Kraken ←→ REST API      │
//! │   Coinbase ←→ FIX           │     Custom ←→ Native        │
//! └─────────────────────────────┴─────────────────────────────┘
//! ```
//!
//! ## Exemplo de Uso
//!
//! ```rust,ignore
//! use core::execution::{builder::ExecutionBuilder, request::ExecutionRequest};
//!
//! // Monta sistema de execução multi-exchange
//! let execution = ExecutionBuilder::new()
//!     .add_exchange("binance", binance_config)
//!     .add_exchange("kraken", kraken_config)
//!     .build()
//!     .await?;
//!
//! // Processa requisição de execução
//! let request = ExecutionRequest::OpenOrder(order_request);
//! execution.send(request).await?;
//! ```

use crate::{engine::execution_tx::MultiExchangeTxMap, execution::builder::ExecutionHandles};
use toucan_data::streams::reconnect;
// Transition note: we purposefully avoid importing alias types (AssetIndex, ExchangeIndex,
// InstrumentIndex) here to demonstrate direct String usage. Other modules may retain
// the aliases for semantic clarity until newtypes are reintroduced.
use toucan_execution::AccountEvent; // alias types replaced locally by String
use toucan_integration::channel::Channel;
use toucan_instrument::exchange::ExchangeId;

/// Provides an execution manager builder for ergonomically initialising multiple execution links
/// to mock and live exchanges.
pub mod builder;

/// Provides an error type that represents all errors that are generated by an execution link.
pub mod error;

/// Per-exchange execution manager that actions order requests from the Engine and forwards back
/// responses.
pub mod manager;

/// Defines an `ExecutionRequest` used by the `Engine` to communicate with an `ExecutionManager`.
pub mod request;

/// Convenient type alias that represents a [`reconnect::Event`] produced by the [`AccountEvent`]
/// stream.
pub type AccountStreamEvent<ExchangeKey = String, AssetKey = String, InstrumentKey = String> =
    reconnect::Event<ExchangeId, AccountEvent<ExchangeKey, AssetKey, InstrumentKey>>;

/// Initialised [`ExecutionBuild`](builder::ExecutionBuild).
///
/// Contains execution component task handles as well as
/// [`ExecutionRequest`](request::ExecutionRequest) and [`AccountStreamEvent`] channels.
#[allow(missing_debug_implementations)]
pub struct Execution {
    pub execution_txs: MultiExchangeTxMap,
    pub account_channel: Channel<AccountStreamEvent>,
    pub handles: ExecutionHandles,
}
