// Mini-Disclaimer: Uso educacional/experimental; sem recomenda√ß√£o de investimento ou afilia√ß√£o; sem remunera√ß√£o de terceiros; Profit/ProfitDLL ¬© Nel√≥gica; veja README & DISCLAIMER.
//! Build script para configurar linkagem da ProfitDLL em Windows
//!
//! Este script configura automaticamente a linkagem da ProfitDLL.dll
//! quando compilando para Windows, incluindo:
//! - Localiza√ß√£o autom√°tica da DLL
//! - Configura√ß√£o de diret√≥rios de busca
//! - Valida√ß√£o de arquivos necess√°rios

use std::env;
use std::path::Path;

fn main() {
    println!("cargo:rerun-if-changed=build.rs");

    // Configura√ß√£o espec√≠fica para Windows
    if cfg!(target_os = "windows") {
        configure_windows_dll();
    } else {
        println!("cargo:warning=ProfitDLL s√≥ √© suportada em Windows. Usando implementa√ß√£o mock.");
    }
}

fn configure_windows_dll() {
    println!("üîß Configurando ProfitDLL para Windows...");

    // Diret√≥rios padr√£o onde a ProfitDLL pode estar instalada
    let possible_paths = vec![
        "C:\\Program Files\\Nelogica\\ProfitDLL",
        "C:\\Program Files (x86)\\Nelogica\\ProfitDLL",
        "C:\\ProfitDLL",
        ".",
        "./lib",
        "./dll",
    ];

    // Tentar localizar ProfitDLL.dll
    let mut dll_found = false;
    for path in &possible_paths {
        let dll_path = Path::new(path).join("ProfitDLL.dll");
        if dll_path.exists() {
            println!("‚úÖ ProfitDLL.dll encontrada em: {path}");
            println!("cargo:rustc-link-search=native={path}");
            dll_found = true;
            break;
        }
    }

    if !dll_found {
        // Verificar vari√°vel de ambiente
        if let Ok(dll_path) = env::var("PROFITDLL_PATH") {
            let dll_file = Path::new(&dll_path).join("ProfitDLL.dll");
            if dll_file.exists() {
                println!("‚úÖ ProfitDLL.dll encontrada via PROFITDLL_PATH: {dll_path}");
                println!("cargo:rustc-link-search=native={dll_path}");
                dll_found = true;
            }
        }
    }

    if dll_found {
        // N√£o configuramos linkagem est√°tica: carregamento din√¢mico puro via libloading.
        // Definir feature condicional
        println!("cargo:rustc-cfg=feature=\"real_dll\"");

        println!("üöÄ ProfitDLL configurada com sucesso!");
    } else {
        println!("‚ö†Ô∏è  ProfitDLL.dll n√£o encontrada. Para usar a DLL real:");
        println!("   1. Instale a ProfitDLL da Nel√≥gica");
        println!("   2. Ou defina PROFITDLL_PATH com o caminho da DLL");
        println!("   3. Ou coloque ProfitDLL.dll no diret√≥rio do projeto");
        println!("   Usando implementa√ß√£o mock.");

        // Definir feature para mock
        println!("cargo:rustc-cfg=feature=\"mock_dll\"");
    }

    // Configura√ß√µes adicionais do Windows
    println!("cargo:rustc-link-lib=kernel32");
    println!("cargo:rustc-link-lib=user32");
}
