#![forbid(unsafe_code)]
#![warn(
    unused,
    clippy::cognitive_complexity,
    unused_crate_dependencies,
    unused_extern_crates,
    clippy::unused_self,
    clippy::useless_let_if_seq,
    missing_debug_implementations,
    rust_2018_idioms
)]
#![allow(clippy::type_complexity, clippy::too_many_arguments, type_alias_bounds)]

//! DISCLAIMER (resumo): Uso educacional/experimental. Sem recomenda√ß√£o de investimento.
//! Sem afilia√ß√£o institucional ou remunera√ß√£o de terceiros. Profit/ProfitDLL ¬© Nel√≥gica.
//! Integra√ß√£o meramente t√©cnica. Leia README & DISCLAIMER completos.
//! # üèõÔ∏è Markets - Abstra√ß√µes Simplificadas de Mercado
//!
//! Traits e tipos fundamentais para exchanges, instrumentos e ativos financeiros.
//! Focado em abstra√ß√µes essenciais sem implementa√ß√µes espec√≠ficas.
//!
//! ## üéØ Filosofia de Design
//!
//! Este m√≥dulo implementa uma arquitetura **h√≠brida** que combina:
//! - **Abstra√ß√µes Reutiliz√°veis**: Traits gen√©ricos para m√°xima flexibilidade
//! - **Implementa√ß√µes Espec√≠ficas**: Tipos brasileiros com terminologia nativa
//! - **Extensibilidade**: F√°cil adi√ß√£o de novos exchanges e instrumentos
//!
//! ## üèóÔ∏è M√≥dulos Principais
//!
//! - `exchange`: Abstra√ß√µes de exchange e identificadores
//! - `asset`: Defini√ß√µes de ativos financeiros e tipos
//! - `instrument`: Abstra√ß√µes de instrumentos financeiros
//! - `side`: Enumera√ß√£o de lados de opera√ß√£o (Buy/Sell)
//! - `b3`: Defini√ß√µes espec√≠ficas da Bolsa Brasileira (B3)
//! - `broker`: Camada de abstra√ß√£o de corretoras (abstrata ‚Äì integra√ß√µes externas em crates pr√≥prias)
//!
//! ## üí° Conceitos Fundamentais
//!
//! ### Exchange
//! Representa um mercado ou bolsa onde instrumentos s√£o negociados:
//! ```rust,ignore
//! use markets::{Exchange, ExchangeId};
//!
//! struct B3Exchange;
//! impl Exchange for B3Exchange {
//!     type ExchangeId = B3ExchangeId;
//!     fn id(&self) -> Self::ExchangeId { /* ... */ }
//!     fn name(&self) -> &'static str { "B3" }
//! }
//! ```
//!
//! ### Instrument
//! Define instrumentos financeiros negoci√°veis:
//! ```rust,ignore
//! use markets::{Instrument, InstrumentKind};
//!
//! struct Stock {
//!     symbol: String,
//!     kind: InstrumentKind,
//! }
//! ```
//!
//! ### Asset
//! Representa ativos financeiros subjacentes:
//! ```rust,ignore
//! use markets::{Asset, AssetType};
//!
//! struct BrazilianReal;
//! impl Asset for BrazilianReal {
//!     fn symbol(&self) -> &str { "BRL" }
//!     fn asset_type(&self) -> AssetType { AssetType::Currency }
//! }
//! ```
//!
//! ## üáßüá∑ Suporte ao Mercado Brasileiro
//!
//! - **B3 Integration**: Suporte nativo √† Bolsa Brasileira
//! - **ProfitDLL**: Conectividade atrav√©s da Nel√≥gica
//! - **Terminologia Local**: Uso de termos espec√≠ficos do mercado brasileiro
//! - **Regulamenta√ß√£o**: Conformidade com regras da CVM
//!

use derive_more::Constructor;
use serde::{Deserialize, Serialize};
use std::fmt::{Display, Formatter};
// Silence unused_crate_dependencies for transitional re-export of tucano-profitdll

/// Re-exporta traits principais para conveni√™ncia de uso.
///
/// Permite importar facilmente os traits fundamentais do m√≥dulo
/// sem precisar especificar o caminho completo de cada subm√≥dulo.
pub use asset::{Asset, AssetType};
pub use exchange::{Exchange, ExchangeId};
pub use instrument::{Instrument, InstrumentKind, MarketDataInstrument};
pub use side::Side;

/// Define abstra√ß√µes de exchanges financeiros.
///
/// Cont√©m traits e tipos para representar diferentes mercados
/// e bolsas onde instrumentos financeiros s√£o negociados.
pub mod exchange;

/// Define abstra√ß√µes de ativos financeiros.
///
/// Inclui defini√ß√µes para diferentes tipos de ativos como
/// moedas, a√ß√µes, commodities, etc., com suas caracter√≠sticas
/// espec√≠ficas e m√©todos de identifica√ß√£o.
pub mod asset;

/// Define abstra√ß√µes de instrumentos financeiros.
///
/// Cont√©m traits e estruturas para representar instrumentos
/// negoci√°veis como a√ß√µes, op√ß√µes, futuros, etc., incluindo
/// metadados de mercado e identifica√ß√£o.
pub mod instrument;

/// Define enumera√ß√£o de lados de opera√ß√£o.
///
/// Especifica se uma opera√ß√£o √© de compra (Buy) ou venda (Sell),
/// fundamental para defini√ß√£o de ordens e an√°lise de fluxo.
pub mod side;

/// Utilit√°rio para valores com chave associada.
///
/// Estrutura gen√©rica que combina uma chave com um valor,
/// √∫til para mapear dados com identificadores espec√≠ficos
/// de forma type-safe e eficiente.
///
/// # Exemplo
/// ```rust,ignore
/// use markets::Keyed;
///
/// let keyed_price = Keyed::new("PETR4", 25.50);
/// assert_eq!(keyed_price.key, "PETR4");
/// assert_eq!(keyed_price.value, 25.50);
/// ```
#[derive(
    Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Deserialize, Serialize, Constructor,
)]
pub struct Keyed<Key, Value> {
    pub key: Key,
    pub value: Value,
}

impl<Key, Value> AsRef<Value> for Keyed<Key, Value> {
    fn as_ref(&self) -> &Value {
        &self.value
    }
}

impl<Key, Value> Display for Keyed<Key, Value>
where
    Key: Display,
    Value: Display,
{
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}, {}", self.key, self.value)
    }
}

/// Instrument Underlying containing a base and quote asset.
#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Deserialize, Serialize)]
pub struct Underlying<AssetKey> {
    pub base: AssetKey,
    pub quote: AssetKey,
}

impl<AssetKey> Underlying<AssetKey> {
    pub fn new<A>(base: A, quote: A) -> Self
    where
        A: Into<AssetKey>,
    {
        Self {
            base: base.into(),
            quote: quote.into(),
        }
    }
}

// Module declarations
pub mod b3;
pub mod broker;

// Re-exports
pub use b3::*;
pub use broker::*;
// Re-export commonly used instrument struct
pub use crate::instrument::ConcreteInstrument;
